/** 
 * shows how to check recent switch states - very helpful to avoid executing something too often, just
 * because somebody presses a button too often (e.g. sending a notification, if the doorbell button is pressed)
 */
 

//import org.openhab.core.types.*
//import org.openhab.core.library.types.*
//import org.openhab.core.persistence.*
//import org.java.math.*
//import org.joda.time.*

import org.openhab.model.script.actions.*
import java.util.concurrent.locks.ReentrantLock
import org.openhab.core.library.types.HSBType
import org.openhab.core.library.types.DecimalType
import java.util.TreeMap
import java.util.Map
import java.lang.Thread // to test sleeping


 
var ReentrantLock myTestLock = new ReentrantLock()
var TreeMap<Integer, HSBType> colourMap = new TreeMap<Integer, HSBType>()


/*
rule "Persistence Demo 2"
when
	Item DemoSwitch received command
then
	if(!DemoSwitch.changedSince(now.minusSeconds(5))) {
		logInfo("Persistence Demo", "You did not press this button during the last 5 seconds!")
	}
end
 */

rule "Initialise variables - required"
when
    System started
then
	
	logInfo("LightCycler", "Init start")		
	
	// populate colour map
	colourMap.put(17*60, new HSBType("180,100,73"))			
	colourMap.put(19*60, new HSBType("180,50,80"))
	colourMap.put(20*60, new HSBType("28,100,50"))
	colourMap.put(23*60, new HSBType("10,100,50"))    
	
	// midnight needs to be defined.. makes it easier
	colourMap.put(0,  new HSBType("10,100,45"))      // required value 	
	colourMap.put(24*60,  new HSBType("10,100,45"))  // required value 
	
	logInfo("LightCycler", "Init done")
	
	
	// initialize mockhour if needed
	if (MockHour == Uninitialized) {
		MockHour.sendCommand(16)	
	}
	
	
end


		
		


// http://localhost:8080/lightsdemo/index.html
rule "Calculate relevant colour"
when
    Item MockHour received command
then
	myTestLock.lock() //blocks here
	try {
		
		
		executeCommandLine("curl -XPUT \"http://192.168.2.188:56780/lights/d073d500072c/color?hue=100&saturation=1&brightness=1&duration=1\" -d ''")
        logInfo("LightCycler", "stuff 1")           
        var hour   = now.getHourOfDay                

		var minute = ((MockHour.state as DecimalType).floatValue*60%60).intValue
		hour = (MockHour.state as DecimalType).intValue
		
		var currentMinutes =   hour*60 + minute
		// http://stackoverflow.com/questions/9482988/find-the-closest-answer-in-hashmap
		// find closest value low (or equal)
		
		logInfo("LightCycler", "Hour:Minute " + hour + ":" + minute)
		logInfo("LightCycler", "Minutes:" + currentMinutes)
		
		var low_start = colourMap.floorEntry(currentMinutes)				
		var high_start = colourMap.ceilingEntry((currentMinutes+1)%(24*60))
		
		var minutes_low  = low_start.getKey()
		var minutes_high = high_start.getKey() 
		if (minutes_low > minutes_high) {
			// we went over the 24h mark to get here
			minutes_high = minutes_high+ 24*60
		}
		
		var change_range = minutes_high - minutes_low
		// assuming that low is higher than high				
		
		var midColour = new HSBType("0,0,0");
		// linear scale for hue, saturation, brightness
		
	
	//		low_start.getValue().hue
		
		// just to test the threading shizzle
		Thread::sleep(500)
		
		logInfo("LightCycler", ""+low_start.getKey()/60.0+", "+low_start.getValue())
		logInfo("LightCycler", ""+high_start.getKey()/60.0+", "+high_start.getValue())
		
		// find closet value higher
		
		
		/*
		redValue   = hsbValue.red.intValue.toString
        greenValue = hsbValue.green.intValue.toString
        blueValue  = hsbValue.blue.intValue.toString
 */

		
        logInfo("LightCycler", "stuff 2")        
    } finally  {
    	myTestLock.unlock()
    }
end