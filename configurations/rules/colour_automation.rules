/** 
 * Calculates light colour based on time of the day
 * Multiple colours can be assigned 
 * TODO items
 * - link with astro binding to make the colour assignments dynamic - for example, colour for dawn / dusk, morning, day
 * - 
 */
 

import org.openhab.model.script.actions.*
import java.util.concurrent.locks.ReentrantLock
import org.openhab.core.library.types.HSBType
import org.openhab.core.library.types.DecimalType
import org.openhab.core.library.types.PercentType
import java.util.TreeMap
import java.util.Map
import java.lang.Thread // to test sleeping
import java.lang.Math

 
var ReentrantLock lightcyclerUpdateLock = new ReentrantLock()
var TreeMap<Integer, HSBType> colourMap = new TreeMap<Integer, HSBType>()

var Number bed_hour = 0 // 0-23


rule "Colourcycler map initialisation"
when
    System started 
    or Time is midnight
then
	logInfo("LightCycler", "Initialising colour map")		
	lightcyclerUpdateLock.lock() //blocks here
	try {
		
		// clear map and get ready for new entries. Useful in the future
		// when hours are going to be bound to sunrise/sunset times
		colourMap.clear()
	
		// populate colour map
		colourMap.put(10*60, new HSBType("10,100,73"))			
		colourMap.put(19*60, new HSBType("180,50,80"))
		colourMap.put(20*60, new HSBType("28,100,50"))
		colourMap.put(23*60, new HSBType("10,100,50"))    
	
		// midnight needs to be defined.. makes it easier
		// TODO automatic calculation from values above is possible
		// by finding & scaling before/after values for midnight			
		var HSBType midnight_colour =  new HSBType("300,100,45")
		colourMap.put(0,      midnight_colour)      // required value 	
		colourMap.put(24*60,  midnight_colour)      // required value 
	
		logInfo("LightCycler", "Colour map init")
	
		
		// initialize mockhour if needed
		if (MockHour == Uninitialized) {
			MockHour.sendCommand(16)	
		}
	
	} finally  {
    	lightcyclerUpdateLock.unlock()
    }
    logInfo("LightCycler", "Colour map initialised&ready to roll")		    
end

// http://localhost:8080/lightsdemo/index.html for preview
rule "Calculate current colour when hour changes"
when
    Item MockHour received command
then
	lightcyclerUpdateLock.lock() //blocks here
	try {
		
        logInfo("LightCycler", "Starting colour change")           
        var hour   = now.getHourOfDay                

		var minute = ((MockHour.state as DecimalType).floatValue*60%60).intValue
		hour = (MockHour.state as DecimalType).intValue
		
		var current_minutes =   hour*60 + minute

		logInfo("LightCycler", "Hour:Minute " + hour + ":" + minute)
		logInfo("LightCycler", "Minutes:" + current_minutes)
		
		// http://stackoverflow.com/questions/9482988/find-the-closest-answer-in-hashmap
		// find closest value low (or equal)
		var low_start = colourMap.floorEntry(current_minutes)				
		var high_start = colourMap.ceilingEntry((current_minutes+1)%(24*60))
		
		var minutes_low  = low_start.getKey()
		var minutes_high = high_start.getKey() 
		if (minutes_low > minutes_high) {
			// we went over the 24h mark to get here
			minutes_high = minutes_high+ 24*60
		}
		
		var Number scaling_factor = 0
		try {
			scaling_factor = (current_minutes - minutes_low) / (minutes_high - minutes_low)
		} catch (ArithmeticException ae) {
			// noop, means that we will not add anything to the starting val			
		}				
		
		// linear scale for hue, saturation, brightness
		// only for Hue we are finding shortest distance on the circle		
		var HSBType colour_start = low_start.getValue()
		var HSBType colour_end =   high_start.getValue()
		
		// make sure we have the closest available distance
		var Number diff_hue = colour_end.getHue() - colour_start.getHue()
		if ((Math::abs(diff_hue.floatValue) >= 180)) {
			// absolute value modulo 180, subtract 180 and invert sign for negative			 
			diff_hue = Math::signum(diff_hue.floatValue) *  (Math::abs(diff_hue.floatValue)%180 -180)
		}
		
		logInfo("LightCycler", "diffHue:  "+diff_hue)
		
		
		var new_hue = new DecimalType((colour_start.getHue().floatValue() + diff_hue * scaling_factor + 360).floatValue % 360)
		var new_saturation = new PercentType(colour_start.getSaturation() + (colour_end.getSaturation() - colour_start.getSaturation()) * scaling_factor)
		var new_brightness = new PercentType(colour_start.getBrightness() + (colour_end.getBrightness() - colour_start.getBrightness()) * scaling_factor)
		
		var HSBType cur_colour = new HSBType(new_hue, new_saturation, new_brightness);
		
		
		Lights.members.forEach(lightCol |
			sendCommand(lightCol, cur_colour)	
		)
		
		// just to test the threading, insert larger values if needed
		// Thread::sleep(10)
		
		logInfo("LightCycler", "Previous:  "+low_start.getKey()/60.0+", "+low_start.getValue())
		logInfo("LightCycler", "Next:      "+high_start.getKey()/60.0+", "+high_start.getValue())				
		logInfo("LightCycler", "Calculated:"+MockHour.state+", "+cur_colour)
		logInfo("LightCycler", "Scaling factor:"+scaling_factor)
		
		
        logInfo("LightCycler", "stuff 2")        
    } finally  {
    	lightcyclerUpdateLock.unlock()
    }
end